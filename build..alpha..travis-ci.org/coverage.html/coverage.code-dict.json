{"/home/travis/build/npmtest/node-npmtest-elm-live/test.js":"/* istanbul instrument in package npmtest_elm_live */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-elm-live/lib.npmtest_elm_live.js":"/* istanbul instrument in package npmtest_elm_live */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_elm_live = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_elm_live = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-elm-live/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-elm-live && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_elm_live */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_elm_live\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_elm_live.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_elm_live.rollup.js'] =\n            local.assetsDict['/assets.npmtest_elm_live.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_elm_live.__dirname + '/lib.npmtest_elm_live.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-elm-live/node_modules/elm-live/index.js":"module.exports = require('./source/elm-live');\n","/home/travis/build/npmtest/node-npmtest-elm-live/node_modules/elm-live/source/elm-live.js":"/*\n  ({\n    outputStream: WritableStream,\n    inputStream: ReadableStream,\n  }) =>\n    exitCode: Integer | Null\n*/\nmodule.exports = (argv, options) => {\n  const chalk = require('chalk');\n  const packageJson = require('../package.json');\n  const parseArgs = require('./parse-args');\n\n  const outputStream = options.outputStream;\n  const inputStream = options.inputStream;\n  const args = parseArgs(argv);\n\n  const SUCCESS = 0;\n  const FAILURE = 1;\n  const bold = chalk.bold;\n  const dim = chalk.dim;\n\n  // Output version\n  if (args.version) {\n    outputStream.write(`${bold('elm-live')} v${packageJson.version}\\n`);\n    return SUCCESS;\n  }\n\n  const path = require('path');\n  const fs = require('fs');\n  const spawnSync = require('cross-spawn').sync;\n  const hasbinSync = require('hasbin').sync;\n\n  // Display help\n  if (args.help) {\n    if (hasbinSync('man')) {\n      const manpagePath =\n        path.resolve(__dirname, '../manpages/elm-live.1');\n      const manProcess =\n        spawnSync('man', [manpagePath], { stdio: [\n          inputStream, outputStream, outputStream,\n        ] });\n\n      if (manProcess.error) throw manProcess.error;\n    } else {\n      const fallbackPath =\n        path.resolve(__dirname, '../manpages/elm-live.1.txt');\n      const plainTextHelp =\n        fs.readFileSync(fallbackPath, 'utf8');\n      outputStream.write(plainTextHelp);\n    }\n\n    return SUCCESS;\n  }\n\n  const indent = require('indent-string');\n  const budo = require('budo');\n  const chokidar = require('chokidar');\n  const debounce = require('./debounce');\n\n  const auxiliaryBuild = (execPath) => {\n    if (!execPath) {\n      return { fatal: false, exitCode: SUCCESS };\n    }\n\n    const process = spawnSync(execPath, [], {\n      stdio: [inputStream, outputStream, outputStream],\n    });\n\n    if (process.error && process.error.code === 'ENOENT') {\n      outputStream.write(\n`\\n${dim('elm-live:')}\n  I can’t find the command ${bold(execPath)}!\n  Please make sure you can call ${bold(execPath)}\n  from your command line.\n\n`\n      );\n\n      return { fatal: true, exitCode: FAILURE };\n    } else if (process.error) {\n      outputStream.write(\n`\\n${dim('elm-live:')} Error while calling ${bold(execPath)}! This output may be helpful:\n${indent(String(process.error), 2)}\n\n`\n      );\n    }\n\n    if (args.recover && process.status !== SUCCESS) outputStream.write(\n`\\n${dim('elm-live:')}\n  ${bold(execPath)} failed! You can find more info above. Keep calm and take your time\n  to check why the command is failing. We’ll try to run it again as soon as you change an Elm file.\n\n`\n    );\n\n    return { fatal: false, exitCode: process.status };\n  };\n\n  // Build logic\n  const build = () => {\n    const beforeBuild = auxiliaryBuild(args.beforeBuild);\n    if (beforeBuild.exitCode !== SUCCESS) {\n      return beforeBuild;\n    }\n\n    const elmMake = spawnSync(args.pathToElmMake, args.elmMakeArgs, {\n      stdio: [inputStream, outputStream, outputStream],\n    });\n\n    if (elmMake.error && elmMake.error.code === 'ENOENT') {\n      outputStream.write(\n`\\n${dim('elm-live:')}\n  I can’t find the command ${bold(args.pathToElmMake)}!\n  Looks like ${bold('elm-platform')} isn’t installed. Make sure you’ve followed\n  the steps at https://git.io/elm-platform and that you can call\n  ${bold(args.pathToElmMake)} from your command line.\n\n  If that fails, have a look at open issues:\n  https://github.com/tomekwi/elm-live/issues .\n\n`\n      );\n\n      return { fatal: true, exitCode: FAILURE };\n    } else if (elmMake.error) {\n      outputStream.write(\n`\\n${dim('elm-live:')} Error while calling ${bold('elm-make')}! This output may be helpful:\n${indent(String(elmMake.error), 2)}\n\n`\n      );\n    }\n\n    if (args.recover && elmMake.status !== SUCCESS) outputStream.write(\n`\\n${dim('elm-live:')}\n  ${bold('elm-make')} failed! You can find more info above. Keep calm and take your time\n  to fix your code. We’ll try to compile it again as soon as you change a file.\n\n`\n    );\n\n    const afterBuild = auxiliaryBuild(args.afterBuild);\n    if (afterBuild.exitCode !== SUCCESS) {\n      return afterBuild;\n    }\n\n    return { fatal: false, exitCode: elmMake.status };\n  };\n\n  // Server logic\n  let serverStarted;\n  const startServer = () => {\n    outputStream.write(\n`\\n${dim('elm-live:')}\n  The build has succeeded. Starting the server!${args.open ? (\n` We’ll open your app\n  in the default browser as soon as it’s up and running.`) : ''}\n\n`\n    );\n    const server = budo({\n      live: true,\n      watchGlob: path.join(args.dir, '**/*.{html,css,js}'),\n      port: args.port,\n      host: args.host,\n      open: args.open,\n      dir: args.dir,\n      stream: outputStream,\n      pushstate: args.pushstate,\n    });\n    server.on('error', (error) => { throw error; });\n\n    serverStarted = true;\n  };\n\n  // First build\n  const firstBuildResult = build();\n  if (\n    firstBuildResult.fatal ||\n    (!args.recover && firstBuildResult.exitCode !== SUCCESS)\n  ) {\n    return firstBuildResult.exitCode;\n  } else if (firstBuildResult.exitCode === SUCCESS) {\n    startServer();\n  }\n\n  const eventNameMap = {\n    add: 'added',\n    addDir: 'added',\n    change: 'changed',\n    unlink: 'removed',\n    unlinkDir: 'removed',\n  };\n\n  // Watch Elm files\n  const watcher = chokidar.watch('**/*.elm', { ignoreInitial: true, followSymlinks: false });\n\n  watcher.on('all', debounce((event, filePath) => {\n    const relativePath = path.relative(process.cwd(), filePath);\n    const eventName = eventNameMap[event] || event;\n\n    outputStream.write(\n`\\n${dim('elm-live:')}\n  You’ve ${eventName} \\`${relativePath}\\`. Rebuilding!\n\n`\n    );\n\n    const buildResult = build();\n    if (!serverStarted && buildResult.exitCode === SUCCESS) {\n      startServer();\n    }\n  }), 100);\n\n  return null;\n};\n","/home/travis/build/npmtest/node-npmtest-elm-live/node_modules/elm-live/bin/elm-live.js":"#! /usr/bin/env node\n\nconst argv = process.argv.slice(2);\n\nconst exitCode = require('..')(argv, {\n  inputStream: process.stdin,\n  outputStream: process.stdout,\n});\n\nif (exitCode !== null) process.exit(exitCode);\n","/home/travis/build/npmtest/node-npmtest-elm-live/node_modules/elm-live/source/parse-args.js":"const defaults = {\n  port: 8000,\n  open: false,\n  help: false,\n  recover: true,\n  pathToElmMake: 'elm-make',\n  host: 'localhost',\n  dir: '.',\n  pushstate: false,\n  version: false,\n};\n\nmodule.exports = (argv) => {\n  const args = {};\n  const elmMakeArgs = [];\n\n  argv.every((arg, index) => {\n    const tryBoolOption = (boolOption) => {\n      if (arg === `--${boolOption}`) {\n        args[boolOption] = true;\n        return true;\n      }\n      return false;\n    };\n    if (['help', 'open', 'pushstate', 'version'].some(tryBoolOption)) {\n      return true;\n    }\n\n    if (arg === '--no-recover') {\n      args.recover = false;\n      return true;\n    }\n\n    const portPattern = /^--port=(\\d+)$/;\n    const portMatch = arg.match(portPattern);\n    if (portMatch) {\n      args.port = Number(portMatch[1]);\n      return true;\n    }\n\n    const tryStringOption = (option) => {\n      const pattern = new RegExp(`^${option.arg}=(.*)$`);\n      const match = arg.match(pattern);\n      if (match) {\n        args[option.key] = match[1];\n        return true;\n      }\n      return false;\n    };\n    if ([\n      { arg: '--host', key: 'host' },\n      { arg: '--path-to-elm-make', key: 'pathToElmMake' },\n      { arg: '--dir', key: 'dir' },\n      { arg: '--before-build', key: 'beforeBuild' },\n      { arg: '--after-build', key: 'afterBuild' },\n    ].some(tryStringOption)) {\n      return true;\n    }\n\n    if (arg === '--') {\n      const elmMakeRest = argv.slice(index + 1);\n      elmMakeRest.forEach(elmMakeArg => elmMakeArgs.push(elmMakeArg));\n      return false;\n    }\n\n    elmMakeArgs.push(arg);\n    return true;\n  });\n\n  return Object.assign({}, defaults, args, { elmMakeArgs });\n};\n","/home/travis/build/npmtest/node-npmtest-elm-live/node_modules/elm-live/source/debounce.js":"// wait until the returned funtion has not been called for `wait`\n// milliseconds before calling the passed in function\nmodule.exports = (func, wait) => {\n  let timeout;\n  return (...theArgs) => {\n    const later = () => {\n      func(...theArgs);\n    };\n\n    if (timeout !== undefined) {\n      clearTimeout(timeout);\n    }\n    timeout = setTimeout(later, wait);\n  };\n};\n"}